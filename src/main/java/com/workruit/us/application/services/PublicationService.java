package com.workruit.us.application.services;

import com.workruit.us.application.configuration.WorkruitException;
import com.workruit.us.application.dto.PublicationDTO;
import com.workruit.us.application.models.Applicant;
import com.workruit.us.application.models.Publication;
import com.workruit.us.application.repositories.ApplicantRepository;
import com.workruit.us.application.repositories.PublicationRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

/**
 * Generated by Spring Data Generator on 25/11/2022
 */
@Component
public class PublicationService {

    private @Autowired PublicationRepository publicationRepository;
    private @Autowired ApplicantRepository applicantRepository;
    private @Autowired ApplicantService applicantService;

    public void updatePublication(List<PublicationDTO> publicationDTOs, Long applicantId, Long consultancyId) throws WorkruitException {
        Applicant applicant = applicantRepository.findByApplicantIdAndConsultancyId(applicantId, consultancyId)
                .orElseThrow(() -> new WorkruitException(String.format("Applicant is not found with id: %s", applicantId)));
        List<Publication> oldPublications = publicationRepository.findByApplicantId(applicantId);
        List<Publication> currentPublications = new ArrayList<Publication>();
        for (PublicationDTO publicationDTO : publicationDTOs) {
            Publication publication = new Publication();
            publication.setApplicantId(applicantId);
            if (publication.getPublicationId() == null || publication.getPublicationId() == 0) {
                publication.setCreatedDate(new Date());
            }
            publication.setPublicationId(publicationDTO.getPublicationId());
            publication.setDescription(publicationDTO.getDescription());
            publication.setUpdatedDate(new Date());
            publication.setTitle(publicationDTO.getTitle());
            publicationRepository.save(publication);
            currentPublications.add(publication);
        }
        Set<Long> publicationIds = currentPublications.stream().map(e -> e.getPublicationId()).collect(Collectors.toSet());
        oldPublications.removeIf(e -> publicationIds.contains(e.getPublicationId()));
        for (Publication publication : oldPublications) {
            publicationRepository.deleteById(publication.getPublicationId());
        }
        applicant.setCorrectionRequired(!applicantService.isCorrectionSolved(applicantId));
        applicantRepository.save(applicant);
    }

    public List<PublicationDTO> getPublications(Long applicantId, Long consultancyId) throws WorkruitException {
        Applicant applicant = applicantRepository.findByApplicantIdAndConsultancyId(applicantId, consultancyId)
                .orElseThrow(() -> new WorkruitException(String.format("Applicant is not found with id: %s", applicantId)));
        List<Publication> publications = publicationRepository.findByApplicantId(applicantId);
        return publications.stream().map(publicationDTO -> {
            PublicationDTO publication = new PublicationDTO();
            publication.setPublicationId(publicationDTO.getPublicationId());
            publication.setDescription(publicationDTO.getDescription());
            publication.setTitle(publicationDTO.getTitle());
            return publication;
        }).collect(Collectors.toList());
    }
}
