package com.workruit.us.application.services;

import com.workruit.us.application.configuration.WorkruitException;
import com.workruit.us.application.dto.InternshipDTO;
import com.workruit.us.application.models.Applicant;
import com.workruit.us.application.models.Internship;
import com.workruit.us.application.repositories.ApplicantRepository;
import com.workruit.us.application.repositories.InternshipRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

/**
 * Generated by Spring Data Generator on 25/11/2022
 */
@Component
public class InternshipService {

    private @Autowired InternshipRepository internshipRepository;
    private @Autowired ApplicantRepository applicantRepository;

    private @Autowired ApplicantService applicantService;

    public void updateInternship(List<InternshipDTO> internshipDTOs, Long applicantId, Long consultancyId) throws WorkruitException {
        Applicant applicant = applicantRepository.findByApplicantIdAndConsultancyId(applicantId, consultancyId)
                .orElseThrow(() -> new WorkruitException(String.format("Applicant is not found with id: %s", applicantId)));
        List<Internship> oldInternships = internshipRepository.findByApplicantId(applicantId);
        List<Internship> currentInternships = new ArrayList<Internship>();

        for (InternshipDTO internshipDTO : internshipDTOs) {
            Internship internship = new Internship();
            internship.setApplicantId(applicantId);
            internship.setCompanyName(internshipDTO.getCompanyName());
            internship.setDescription(internshipDTO.getDescription());
            if (internshipDTO.getInternshipId() == null || internshipDTO.getInternshipId() == 0) {
                internship.setCreatedDate(new Date());
            }
            internship.setInternshipId(internshipDTO.getInternshipId());
            internship.setUpdatedDate(new Date());
            internship.setEndDate(internshipDTO.getEndDate());
            internship.setJobTitle(internshipDTO.getJobTitle());
            internship.setCurrentlyWorkingHere(internshipDTO.isCurrentlyWorkingHere());
            internship.setLocation(internshipDTO.getLocation());
            internship.setStartDate(internshipDTO.getStartDate());
            internshipRepository.save(internship);
            currentInternships.add(internship);
        }
        Set<Long> internshipIds = currentInternships.stream().map(e -> e.getInternshipId()).collect(Collectors.toSet());
        oldInternships.removeIf(e -> internshipIds.contains(e.getInternshipId()));
        for (Internship internship : oldInternships) {
            internshipRepository.deleteById(internship.getInternshipId());
        }
        applicant.setCorrectionRequired(!applicantService.isCorrectionSolved(applicantId));
        applicantRepository.save(applicant);
        applicantService.runJobMatcher(applicantId);
    }

    public List<InternshipDTO> getInternship(Long applicantId, Long consultancyId) throws WorkruitException {
        Applicant applicant = applicantRepository.findByApplicantIdAndConsultancyId(applicantId, consultancyId)
                .orElseThrow(() -> new WorkruitException(String.format("Applicant is not found with id: %s", applicantId)));
        List<Internship> internships = internshipRepository.findByApplicantId(applicantId);
        return internships.stream().map(internship -> {
            InternshipDTO dto = new InternshipDTO();
            dto.setCompanyName(internship.getCompanyName());
            dto.setDescription(internship.getDescription());
            dto.setCurrentlyWorkingHere(internship.isCurrentlyWorkingHere());
            dto.setEndDate(internship.getEndDate());
            dto.setJobTitle(internship.getJobTitle());
            dto.setLocation(internship.getLocation());
            dto.setStartDate(internship.getStartDate());
            dto.setInternshipId(internship.getInternshipId());
            return dto;
        }).collect(Collectors.toList());
    }
}
