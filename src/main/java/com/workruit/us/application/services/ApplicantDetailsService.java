package com.workruit.us.application.services;

import com.workruit.us.application.dto.ApplicantDetailsDTO;
import com.workruit.us.application.models.*;
import com.workruit.us.application.repositories.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.Date;
import java.util.List;
import java.util.Optional;

/**
 * Generated by Spring Data Generator on 25/11/2022
 */
@Component
public class ApplicantDetailsService {

    private @Autowired ApplicantDetailsRepository applicantDetailsRepository;
    private @Autowired ApplicantRepository applicantRepository;
    private @Autowired JobFunctionRepository jobFunctionRepository;
    private @Autowired ApplicantSecondaryJobFunctionRepository applicantSecondaryJobFunctionRepository;
    private @Autowired ApplicantJobFunctionRepository applicantJobFunctionRepository;
    private @Autowired JobSkillsRepository jobSkillsRepository;
    private @Autowired ApplicantJobSkillRepository applicantJobSkillRepository;
    private @Autowired ApplicantService applicantService;

    public void updateApplicantDetails(ApplicantDetailsDTO applicantDetailsDTO, Long applicantId) {
        Optional<Applicant> optional = applicantRepository.findById(applicantId);
        if (optional.isPresent()) {
            ApplicantDetails applicantDetailsOptional = applicantDetailsRepository.findByApplicantId(applicantId);
            if (applicantDetailsOptional != null) {
                saveApplicantDetailsOfApplicant(applicantDetailsOptional, applicantId, applicantDetailsDTO);
            } else {
                saveApplicantDetailsOfApplicant(new ApplicantDetails(), applicantId, applicantDetailsDTO);
            }
        }
        applicantService.runJobMatcher(applicantId);

    }

    //    public void saveApplicantDetailsOfApplicant(ApplicantDetails applicantDetails, Long applicantId, ApplicantDetailsDTO applicantDetailsDTO) {
//        applicantDetails.setApplicantId(applicantId);
//        applicantDetails.setCareerLevel(applicantDetailsDTO.getCareerLevel());
//        applicantDetails.setCitizenship(applicantDetailsDTO.getCitizenship());
//        applicantDetails.setCurrentSalary(applicantDetailsDTO.getCurrentSalary());
//        applicantDetails.setCurrentWorkStatus(applicantDetailsDTO.getCurrentWorkStatus());
//        applicantDetails.setExpectedSalary(applicantDetailsDTO.getExpectedSalary());
//        applicantDetails.setExpectedSalaryType(applicantDetailsDTO.getExpectedSalaryType());
//        applicantDetails.setHideExpectedSalary(applicantDetailsDTO.isHideExpectedSalary());
//        applicantDetails.setHideSalary(applicantDetailsDTO.isHideSalary());
//        applicantDetails.setJobFunction(applicantDetailsDTO.getJobFunction());
//        applicantDetails.setSecondaryJobFunction(applicantDetailsDTO.getSecondaryJobFunction());
//        applicantDetails.setJobType(applicantDetailsDTO.getJobType());
//        applicantDetails.setNoticePeriod(applicantDetailsDTO.getNoticePeriod());
//        applicantDetails.setPreferredWorkMode(applicantDetailsDTO.getPreferredWorkMode());
//        applicantDetails.setRelocation(applicantDetailsDTO.getRelocation());
//        applicantDetails.setSalaryType(applicantDetailsDTO.getSalaryType());
//        applicantDetails.setRelocation(applicantDetailsDTO.getRelocation());
//        applicantDetails.setSkills(applicantDetailsDTO.getSkills());
//        applicantDetails.setSalaryRate(applicantDetailsDTO.getSalaryRate());
//        applicantDetails.setYearsOfExperience(applicantDetailsDTO.getYearsOfExperience());
//        applicantDetails.setWillingToRelocate(applicantDetailsDTO.isWillingToRelocate());
//        applicantDetailsRepository.save(applicantDetails);
//    }
//
//    public ApplicantDetailsDTO getApplicantDetails(Long applicantId) {
//        Optional<Applicant> optional = applicantRepository.findById(applicantId);
//        if (optional.isPresent()) {
//            ApplicantDetails applicantDetails = applicantDetailsRepository.findByApplicantId(applicantId);
//            ApplicantDetailsDTO dto = new ApplicantDetailsDTO();
//            dto.setApplicantId(applicantId);
//            dto.setCareerLevel(applicantDetails.getCareerLevel());
//            dto.setYearsOfExperience(applicantDetails.getYearsOfExperience());
//            dto.setCitizenship(applicantDetails.getCitizenship());
//            dto.setCurrentSalary(applicantDetails.getCurrentSalary());
//            dto.setCurrentWorkStatus(applicantDetails.getCurrentWorkStatus());
//            dto.setExpectedSalary(applicantDetails.getExpectedSalary());
//            dto.setSkills(applicantDetails.getSkills());
//            dto.setExpectedSalaryType(applicantDetails.getExpectedSalaryType());
//            dto.setHideExpectedSalary(applicantDetails.isHideExpectedSalary());
//            dto.setHideSalary(applicantDetails.isHideSalary());
//            dto.setJobFunction(applicantDetails.getJobFunction());
//            dto.setSecondaryJobFunction(applicantDetails.getSecondaryJobFunction());
//            dto.setJobType(applicantDetails.getJobType());
//            dto.setNoticePeriod(applicantDetails.getNoticePeriod());
//            dto.setPreferredWorkMode(applicantDetails.getPreferredWorkMode());
//            dto.setRelocation(applicantDetails.getRelocation());
//            dto.setSalaryType(applicantDetails.getSalaryType());
//            dto.setSalaryRate(applicantDetails.getSalaryRate());
//            dto.setRelocation(applicantDetails.getRelocation());
//            dto.setApplicantDetailId(applicantDetails.getApplicantDetailId());
//            dto.setWillingToRelocate(applicantDetails.isWillingToRelocate());
//            return dto;
//        }
//        return null;
//    }
    public void saveApplicantDetailsOfApplicant(ApplicantDetails applicantDetails, Long applicantId, ApplicantDetailsDTO applicantDetailsDTO) {
        applicantDetails.setApplicantId(applicantId);
        applicantDetails.setCareerLevel(applicantDetailsDTO.getCareerLevel());
        applicantDetails.setCitizenship(applicantDetailsDTO.getCitizenship());
        applicantDetails.setCurrentSalary(applicantDetailsDTO.getCurrentSalary());
        applicantDetails.setCurrentWorkStatus(applicantDetailsDTO.getCurrentWorkStatus());
        applicantDetails.setExpectedSalaryRate(applicantDetailsDTO.getExpectedSalaryRate());
        applicantDetails.setExpectedSalary(applicantDetailsDTO.getExpectedSalary());
        applicantDetails.setExpectedSalaryType(applicantDetailsDTO.getExpectedSalaryType());
        applicantDetails.setHideExpectedSalary(applicantDetailsDTO.isHideExpectedSalary());
        applicantDetails.setHideSalary(applicantDetailsDTO.isHideSalary());
        if (applicantDetails.getApplicantDetailId() != null) {
            List<ApplicantJobFunction> applicantJobFunctionList = applicantJobFunctionRepository.findByApplicantId(applicantId);
            if (applicantJobFunctionList != null && !applicantJobFunctionList.isEmpty()) {
                applicantJobFunctionRepository.deleteByApplicantId(applicantId);
            }
            List<ApplicantSecondaryJobFunction> applicantSecondaryJobFunctions = applicantSecondaryJobFunctionRepository.findByApplicantId(applicantId);
            if (applicantSecondaryJobFunctions != null && !applicantSecondaryJobFunctions.isEmpty()) {
                applicantSecondaryJobFunctionRepository.deleteByApplicantId(applicantId);
            }
            List<ApplicantJobSkill> applicantJobSkills = applicantJobSkillRepository.findByApplicantId(applicantId);
            if (applicantJobSkills != null && !applicantJobSkills.isEmpty()) {
                applicantJobSkillRepository.deleteByApplicantId(applicantId);
            }
        }
        if (applicantDetailsDTO.getJobFunction() != null && !applicantDetailsDTO.getJobFunction().isEmpty()) {
            String[] jobFunctions = applicantDetailsDTO.getJobFunction().split(",");
            if (jobFunctions != null && jobFunctions.length > 0) {
                for (String jobFunction : jobFunctions) {
                    JobFunction jobFunctionModel = jobFunctionRepository
                            .findByJobFunctionNameIgnoreCase(jobFunction);
                    if (jobFunctionModel != null) {
                        ApplicantJobFunction applicantJobFunction = new ApplicantJobFunction();
                        applicantJobFunction.setApplicantId(applicantId);
                        applicantJobFunction.setJobFunctionId(jobFunctionModel.getJobFunctionId());
                        applicantJobFunction.setCreatedDate(new Date());
                        applicantJobFunction.setUpdatedDate(new Date());
                        applicantJobFunctionRepository.save(applicantJobFunction);
                        applicantDetails.setJobFunctionId(Long.valueOf(jobFunctionModel.getJobFunctionId()));
                    }
                }
            }
            applicantDetails.setJobFunction(applicantDetailsDTO.getJobFunction());
        }
        if (applicantDetailsDTO.getSecondaryJobFunction() != null && !applicantDetailsDTO.getSecondaryJobFunction().isEmpty()) {
            String[] secondaryJobFunctions = applicantDetailsDTO.getSecondaryJobFunction().split(",");
            String secJobFunctionIds = "";
            if (secondaryJobFunctions != null && secondaryJobFunctions.length > 0) {
                for (String jobFunction : secondaryJobFunctions) {
                    JobFunction jobFunctionModel = jobFunctionRepository
                            .findByJobFunctionNameIgnoreCase(jobFunction);
                    if (jobFunctionModel != null) {
                        ApplicantSecondaryJobFunction applicantSecondaryJobFunction = new ApplicantSecondaryJobFunction();
                        applicantSecondaryJobFunction.setApplicantId(applicantId);
                        applicantSecondaryJobFunction.setJobFunctionId(jobFunctionModel.getJobFunctionId());
                        applicantSecondaryJobFunction.setCreatedDate(new Date());
                        applicantSecondaryJobFunction.setUpdatedDate(new Date());
                        applicantSecondaryJobFunctionRepository.save(applicantSecondaryJobFunction);
                        if (!secJobFunctionIds.isEmpty()) {
                            secJobFunctionIds += ",";
                        }
                        secJobFunctionIds += jobFunctionModel.getJobFunctionId();
                    }
                }
                applicantDetails.setSecondaryJobFunctionIds(secJobFunctionIds);
            }
            applicantDetails.setSecondaryJobFunction(applicantDetailsDTO.getSecondaryJobFunction());
        }
        if (applicantDetailsDTO.getSecondaryJobFunction() == null || applicantDetailsDTO.getSecondaryJobFunction().trim().isEmpty()) {
            applicantDetails.setSecondaryJobFunction(null);
            applicantSecondaryJobFunctionRepository.deleteByApplicantId(applicantDetailsDTO.getApplicantId());
        }
        applicantDetails.setJobType(applicantDetailsDTO.getJobType());
        applicantDetails.setNoticePeriod(applicantDetailsDTO.getNoticePeriod());
        applicantDetails.setPreferredWorkMode(applicantDetailsDTO.getPreferredWorkMode());
        applicantDetails.setRelocation(applicantDetailsDTO.getRelocation());
        applicantDetails.setSalaryType(applicantDetailsDTO.getSalaryType());
        applicantDetails.setRelocation(applicantDetailsDTO.getRelocation());
        if (applicantDetailsDTO.getSkills() != null && !applicantDetailsDTO.getSkills().isEmpty()) {
            String[] jobSkills = applicantDetailsDTO.getSkills().split(",");
            String skillIds = "";
            if (jobSkills != null && jobSkills.length > 0) {
                for (String jobSkill : jobSkills) {
                    JobSkills jobSkillModel = jobSkillsRepository.findBySkillNameIgnoreCase(jobSkill);
                    if (jobSkillModel != null) {
                        ApplicantJobSkill applicantJobSkill = new ApplicantJobSkill();
                        applicantJobSkill.setApplicantId(applicantId);
                        applicantJobSkill.setJobSkillId(jobSkillModel.getSkillId());
                        applicantJobSkill.setCreatedDate(new Date());
                        applicantJobSkill.setUpdatedDate(new Date());
                        applicantJobSkillRepository.save(applicantJobSkill);
                        if (!skillIds.isEmpty()) {
                            skillIds += ",";
                        }
                        skillIds += jobSkillModel.getSkillId();
                    }
                }
                applicantDetails.setSkillIds(skillIds);
            }
            applicantDetails.setSkills(applicantDetailsDTO.getSkills());
        }
        applicantDetails.setSalaryRate(applicantDetailsDTO.getSalaryRate());
        applicantDetails.setYearsOfExperience(applicantDetailsDTO.getYearsOfExperience());
        applicantDetails.setWillingToRelocate(applicantDetailsDTO.isWillingToRelocate());
        applicantDetailsRepository.save(applicantDetails);

        Applicant applicant = applicantRepository.findById(applicantId).get();
        applicant.setCorrectionRequired(!applicantService.isCorrectionSolved(applicantId));
        applicantRepository.save(applicant);
    }

    public ApplicantDetailsDTO getApplicantDetails(Long applicantId) {
        Optional<Applicant> optional = applicantRepository.findById(applicantId);
        if (optional.isPresent()) {
            ApplicantDetails applicantDetails = applicantDetailsRepository.findByApplicantId(applicantId);
            ApplicantDetailsDTO dto = new ApplicantDetailsDTO();
            dto.setApplicantId(applicantId);
            dto.setCareerLevel(applicantDetails.getCareerLevel());
            dto.setYearsOfExperience(applicantDetails.getYearsOfExperience());
            dto.setCitizenship(applicantDetails.getCitizenship());
            dto.setCurrentSalary(applicantDetails.getCurrentSalary());
            dto.setSalaryRate(applicantDetails.getSalaryRate());
            dto.setCurrentWorkStatus(applicantDetails.getCurrentWorkStatus());
            dto.setExpectedSalary(applicantDetails.getExpectedSalary());
            dto.setExpectedSalaryRate(applicantDetails.getExpectedSalaryRate());
            dto.setSkills(applicantDetails.getSkills());
            dto.setExpectedSalaryType(applicantDetails.getExpectedSalaryType());
            dto.setHideExpectedSalary(applicantDetails.isHideExpectedSalary());
            dto.setHideSalary(applicantDetails.isHideSalary());
            dto.setJobFunction(applicantDetails.getJobFunction());
            dto.setSecondaryJobFunction(applicantDetails.getSecondaryJobFunction());
            dto.setJobType(applicantDetails.getJobType());
            dto.setNoticePeriod(applicantDetails.getNoticePeriod());
            dto.setPreferredWorkMode(applicantDetails.getPreferredWorkMode());
            dto.setRelocation(applicantDetails.getRelocation());
            dto.setSalaryType(applicantDetails.getSalaryType());
            dto.setRelocation(applicantDetails.getRelocation());
            dto.setApplicantDetailId(applicantDetails.getApplicantDetailId());
            dto.setWillingToRelocate(applicantDetails.isWillingToRelocate());
            return dto;
        }
        return null;
    }
}
