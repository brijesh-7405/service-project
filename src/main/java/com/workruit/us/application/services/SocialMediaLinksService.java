package com.workruit.us.application.services;

import com.workruit.us.application.configuration.WorkruitException;
import com.workruit.us.application.dto.SocialMediaLinksDTO;
import com.workruit.us.application.models.Applicant;
import com.workruit.us.application.models.SocialMediaLinks;
import com.workruit.us.application.repositories.ApplicantRepository;
import com.workruit.us.application.repositories.SocialMediaLinksRepository;
import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Date;
import java.util.List;

/**
 * Generated by Spring Data Generator on 25/11/2022
 */
@Service
public class SocialMediaLinksService {

    @Autowired
    private SocialMediaLinksRepository socialMediaLinksRepository;

    @Autowired
    private ApplicantRepository applicantRepository;

    private @Autowired ModelMapper modelMapper;
    private @Autowired ApplicantService applicantService;

    public void updateSocialMediaLinks(SocialMediaLinksDTO socialMediaLinksDTO, Long applicantId,
                                       Long consultancyId) throws WorkruitException {
        Applicant applicant = applicantRepository.findByApplicantIdAndConsultancyId(applicantId, consultancyId)
                .orElseThrow(
                        () -> new WorkruitException(String.format("Applicant is not found with id: %s", applicantId)));

        List<SocialMediaLinks> socialMediaLinksList = socialMediaLinksRepository.findByApplicantId(applicantId);
        SocialMediaLinks socialMediaLinks = null;
        if (socialMediaLinksList != null && socialMediaLinksList.size() > 0) {
            socialMediaLinks = socialMediaLinksList.get(0);
        } else {
            socialMediaLinks = new SocialMediaLinks();
            socialMediaLinks.setCreatedDate(new Date());
        }

        socialMediaLinks.setApplicantId(applicant.getApplicantId());
        socialMediaLinks.setGithubLink(socialMediaLinksDTO.getGithubLink());
        socialMediaLinks.setLinkedinLink(socialMediaLinksDTO.getLinkedinLink());
        socialMediaLinks.setTwitterLink(socialMediaLinksDTO.getTwitterLink());
        socialMediaLinks.setWebsiteLink(socialMediaLinksDTO.getWebsiteLink());
        socialMediaLinks.setBlogLink(socialMediaLinksDTO.getBlogLink());
        socialMediaLinks.setBehanceLink(socialMediaLinksDTO.getBehanceLink());
        socialMediaLinks.setFacebookLink(socialMediaLinksDTO.getFacebookLink());
        socialMediaLinks.setUpdatedDate(new Date());
        socialMediaLinksRepository.save(socialMediaLinks);
        applicant.setCorrectionRequired(!applicantService.isCorrectionSolved(applicantId));
        applicantRepository.save(applicant);
    }

    public SocialMediaLinksDTO getApplicantSocialMediaLinks(Long applicantId, Long consultancyId)
            throws WorkruitException {
        Applicant applicant = applicantRepository.findByApplicantIdAndConsultancyId(applicantId, consultancyId)
                .orElseThrow(
                        () -> new WorkruitException(String.format("Applicant is not found with id: %s", applicantId)));

        List<SocialMediaLinks> socialMediaLinks = socialMediaLinksRepository.findByApplicantId(applicant.getApplicantId());

        if (socialMediaLinks != null && socialMediaLinks.size() > 0) {
            return modelMapper.map(socialMediaLinks.get(0), SocialMediaLinksDTO.class);
        } else {
            throw new WorkruitException("Social media links not found");
        }
    }

}
